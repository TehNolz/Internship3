@page "/Contact"
@using System.ComponentModel.DataAnnotations
@using Markdig
@using System.Text;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq
@inject HttpClient HttpClient
@((MarkupString)Markdown.ToHtml(@"

# Contact
Mocht u contact met mij willen opnemen, dan kan dit via het onderstaande formulier. Ik zal zo snel mogelijk reageren.
Ook ben ik te bereiken via [email](mailto:n.vandekerkhof@outlook.com)

"))

<EditForm Model="@Input" OnValidSubmit="Send">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<p></p>
	Emailaddress
	<p></p>
	<InputText @bind-Value="Input.Email"></InputText> @*//TODO: Convert to Material https://samprof.github.io/MatBlazor/EditContext)*@
	<p></p>
	Uw bericht
	<p></p>
	<InputTextArea @bind-Value="Input.Content"></InputTextArea> @*//TODO: Convert to Material)*@
	<p></p>
	<MatButton Type="submit">Verzenden</MatButton>
</EditForm>

<MatSnackbar @bind-IsOpen="@successOpen">
	<MatSnackbarContent>Uw bericht is verzonden.</MatSnackbarContent>
	<MatSnackbarActions>
		<MatButton Raised="true" OnClick="()=>successOpen = false">Ok</MatButton>
	</MatSnackbarActions>
</MatSnackbar>
<MatSnackbar @bind-IsOpen="@failOpen">
	<MatSnackbarContent><MatIcon></MatIcon>Het is niet gelukt om het bericht te versturen. Probeer het later nog een keer, of stuur mij een email.</MatSnackbarContent>
	<MatSnackbarActions>
		<MatButton Raised="true" OnClick="()=>failOpen = false">Ok</MatButton>
	</MatSnackbarActions>
</MatSnackbar>

@code {

	private bool successOpen;
	private bool failOpen;

	private class InputForm
	{
		[Required(ErrorMessage = "Een emailaddress is verplicht.")]
		[EmailAddress(ErrorMessage = "Dit is geen geldig emailaddress.")]
		public string Email { get; set; }

		[Required(AllowEmptyStrings = false, ErrorMessage = "Lege berichten zijn niet toegestaan.")]
		public string Content { get; set; }
	}

	private InputForm Input { get; set; } = new InputForm();

	private async void Send()
	{
		var message = new JObject()
		{
			{"embeds", new JArray()
				{
					new JObject()
					{
						{"title", Input.Email },
						{"description", Input.Content },
						{"color", 44337}
					}
				}
			}
		};
		var response = await HttpClient.PostAsync(
			"https://discordapp.com/api/webhooks/760435526674153482/HNgdDYva2cITN_R7Os9P3OExzBdqqiwH_bWLmQVdUO2Mhs3GtF-GOAo6B0LovbMXjiA2",
			new StringContent(message.ToString(Formatting.None), Encoding.UTF8, "application/json")
		);

		successOpen = response.IsSuccessStatusCode;
		failOpen = !successOpen;
		this.StateHasChanged();
	}
}
